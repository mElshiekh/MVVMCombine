//
//  HomeViewModel.swift
//  MVVMCombine
//
//  Created by Mohamed ElSheikh on 31/03/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects
//

import UIKit
import Combine

class HomeViewModel: HomeViewModelProtocol {
    var newsObserver = PassthroughSubject<[NewsItem]?, Never>()
    var loadingObserver = PassthroughSubject<Bool, Never>()
    var networkErrorObserver = PassthroughSubject<String, Never>()
    var service: NewsServiceServicesProtocol?
    private var cancellables = Set<AnyCancellable>()
    
    func getNews() {
        loadingObserver.send(true)
        service?.getNews().sink(receiveCompletion: { [weak self] completion in
            self?.loadingObserver.send(false)
            switch completion {
            case .finished:
                break
            case .failure(let error):
                switch error.type {
                case .noInternet:
                    self?.networkErrorObserver.send("no internet")
                case .serverError:
                    self?.networkErrorObserver.send("Server error")
                case .unauthorized:
                    print("logout")
                }
            }
        }, receiveValue: { [weak self] resp in
            self?.loadingObserver.send(false)
            self?.newsObserver.send(resp?.results)
        }).store(in: &cancellables)
    }
    
}
