//
//  HomeCoordinator.swift
//  MVVMCombine
//
//  Created by Mohamed ElSheikh on 31/03/2023.
//  Copyright (c) 2023 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects
//

import Combine
import UIKit

class HomeCoordinator: BaseCoordinator, HomeCoordinatorProtocol {
    weak var controller: HomeViewControllerProtocol?
    var callBack: PassthroughSubject<HomeCoordinatorCallback, Never>?
    var navigationController: UINavigationController?

    func start(model: HomeCoordinatorModelProtocol,
               callBack: PassthroughSubject<HomeCoordinatorCallback, Never>) -> UIViewController {
        self.callBack = callBack
        navigationController = model.navigationController
        let viewModel = HomeViewModel()
        viewModel.service = NewsServiceServices()
        let controller = HomeViewController.loadFromNib()
        self.controller = controller
        controller.coordinator = self
        controller.viewModel = viewModel
        AppCoordinator.shared.currentCoordinators.append(self)
        return controller
    }

    private var cancellables = Set<AnyCancellable>()

    func goToDetails() {
        let coordinator = DetailsCoordinator()
        let callBack = PassthroughSubject<DetailsCoordinatorCallback, Never>()
        callBack.sink(receiveValue: { value in
            switch value {
            case .closed:
                break
            }
        }).store(in: &cancellables)
        let controller = coordinator.start(model: DetailsCoordinatorModel(navigationController: navigationController),
                                           callBack: callBack)
        navigationController?.pushViewController(controller, animated: true)
    }

    deinit {
        callBack?.send(.closed)
    }
}
